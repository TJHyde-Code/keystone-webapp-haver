@model IEnumerable<HaverGroupProject.Models.OperationsSchedule>
@{
    ViewData["Title"] = "Operations Schedule";
}

<div class="text-end mb-3">
    <a asp-controller="OperationsSchedule" asp-action="DownloadOperationsSchedules" class="btn btn-success">
        <i class="bi bi-download"></i> Download Sales Orders
    </a>
</div>

<h1>Sales Orders</h1>

<!-- Collapsible Filter Card -->
<div class="shadow-lg p-3 mb-5 bg-body-tertiary rounded">
    <div class="card mb-3">
        <div class="card-header details-header text-white d-flex justify-content-between align-items-center">
            <span>Filter Sales Orders</span>
            <button class="btn btn-sm btn-light"
                    type="button"
                    data-bs-toggle="collapse"
                    data-bs-target="#filterCollapse"
                    aria-expanded="true"
                    aria-controls="filterCollapse"
                    title="Toggle filters">
                <i class="bi bi-funnel-fill" id="filterToggleIcon"></i>
            </button>
        </div>

        <div class="collapse" id="filterCollapse">
            <div class="card-body">
                <form asp-action="Index" method="get" class="row g-3" id="filterForm">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label"><strong>@Html.DisplayNameFor(model => model.First().SalesOrdNum)</strong></label>
                            <input name="SalesOrderNumber" value="@Context.Request.Query["SalesOrderNumber"]" class="form-control" placeholder=" Search by Sales Order Number" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>@Html.DisplayNameFor(model => model.First().Customer.CustomerName)</strong></label>
                            <input name="CustomerName" value="@Context.Request.Query["CustomerName"]" class="form-control" placeholder=" Search by Customer Name" />
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label"><strong>Engineer</strong></label>
                            <input name="EngineerFirstName" value="@Context.Request.Query["EngineerFirstName"]" class="form-control" placeholder="Search by first name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Machine Serial Number</strong></label>
                            <input name="MachineSerialNumber" value="@Context.Request.Query["MachineSerialNumber"]" class="form-control" placeholder="Search by Machine Serial Number" />
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label"><strong>Vendor</strong></label>
                            <input name="Vendor" value="@Context.Request.Query["Vendor"]" class="form-control" placeholder="Search by Vendor's name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Production Order #</strong></label>
                            <input name="ProductionOrderNumber" value="@Context.Request.Query["ProductionOrderNumber"]" class="form-control" placeholder="Search by Production Order #" />
                        </div>
                    </div>

                    <div class="col-12">
                        <div class="d-flex justify-content-end gap-1">
                            <!-- Apply Filters Button (Compact) -->
                            <button type="submit" class="btn btn-primary btn-sm py-1 px-2" id="filterButton">
                                <i class="bi bi-search me-1" style="font-size: 0.8rem;"></i>Apply
                                <span class="spinner-border spinner-border-sm d-none" id="loadingSpinner"></span>
                            </button>

                            <!-- Clear Filters Button (Compact) -->
                            <a asp-action="Index" class="btn btn-outline-secondary btn-sm py-1 px-2">
                                <i class="bi bi-arrow-counterclockwise me-1" style="font-size: 0.8rem;"></i>Clear
                            </a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="shadow-lg p-3 mb-5 bg-body-tertiary rounded">
    <p>
        <a asp-action="Step1" class="btn btn-success" style="font-size: 12px;">
            <i class="bi bi-plus-lg me-1"></i>Create New
        </a>
    </p>


    <div class="table-responsive">
        <table class="table table-bordered table-striped table-hover">
            <thead class="table-col">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.SalesOrdNum)</th>
                    <th>@Html.DisplayNameFor(model => model.Customer)</th>
                    <th>@Html.DisplayNameFor(model => model.Engineer)</th>
                    <th>@Html.DisplayNameFor(model => model.OperationsScheduleMachines)</th>
                    <th>@Html.DisplayNameFor(model => model.MachineDescription.SerialNumber)</th>
                    <th>@Html.DisplayNameFor(model => model.OperationsScheduleVendors)</th>
                    <th>@Html.DisplayNameFor(model => model.ProductionOrderNumber)</th>
                    <th>Extras</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (!Model.Any())
                {
                    <tr>
                        <td colspan="9" class="text-center text-muted py-4">No records found matching your filters</td>
                    </tr>
                }
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.SalesOrdNum)</td>
                        <td>@(item.Customer != null ? item.Customer.CustomerName : "N/A")</td>
                        <td>@(item.Engineer != null ? item.Engineer.EngSummary : "N/A")</td>


                        <td>
                            @{
                                var machines = item.OperationsScheduleMachines?.Select(m => m?.MachineDescription.DescriptionSummary ?? "No Machines").ToList() ?? new List<string>();
                                if (machines.Any())
                                {
                                    <span>@machines.First()</span>
                                    if (machines.Count > 1)
                                    {
                                        <span class="badge bg-info">+@(machines.Count - 1)</span>
                                    }
                                }
                                else
                                {
                                    @:No Machine
                                }
                            }
                        </td>
                        <td>
                            @{
                                var serial = item.OperationsScheduleMachines?.Select(s => s.MachineDescription.SerialNumber ?? "No serial #").ToList() ?? new List<string>();
                                if (serial.Any())
                                {
                                    <span>@serial.First()</span>
                                    if(serial.Count > 1)
                                    {
                                        <span class="badge bg-info">+@(serial.Count - 1)</span>
                                    }
                                   
                                }
                                else
                                {
                                    @:No Serial
                                }
                            }
                            </td>
                       

                        <td>
                            @{
                                var vendors = item.OperationsScheduleVendors?.Select(v => v?.Vendor?.VendorName ?? "Unknown Vendor").ToList() ?? new List<string>();
                                if (vendors.Any())
                                {
                                    <span>@vendors.First()</span>
                                    if (vendors.Count > 1)
                                    {
                                        <span class="badge bg-info">+@(vendors.Count - 1)</span>
                                    }
                                }
                                else
                                {
                                    @:No Vendor
                                }
                            }
                        </td>
                        <td>@(item.ProductionOrderNumber ?? "N/A")</td>

                       

                        <td>
                            @{
                                var extras = item.OperationsScheduleMachines?
                                        .SelectMany(m => new[] {
                                                m.MachineDescription.NamePlateOrdered     ? "Name Plate Ordered"     : null,
                                                m.MachineDescription.NameplateRecieved    ? "Name Plate Received"    : null,
                                                m.MachineDescription.BaseFrame            ? "Base Frame"             : null,
                                                m.MachineDescription.AirSeal              ? "Air Seal"               : null,
                                                m.MachineDescription.CoatingLining        ? "Coating / Lining"       : null,
                                                m.MachineDescription.Disassembly          ? "Disassembly"            : null


                                })
                                        .Where(x => x != null)
                                        .ToList() ?? new List<string>();

                                var collapseId = $"collapseExtras_{item.ID}";
                                if (extras.Any())
                                {
                                    <span>@extras.First()</span>
                                    if(extras.Count > 1)
                                    {
                                        
                                        <button class="badge bg-info border-0" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                                            +@((extras.Count) - 1)
                                        </button>

                                        <div class="collapse mt-2" id="@collapseId">
                                            <ul class="list-unstyled mb-0">
                                                @foreach (var extra in extras)
                                                {
                                                    <li>• @extra</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                }
                                else
                                {
                                    @:No Extras
                                }

                            }
                        </td>

                        @* <td>@(item.MachineDescription != null && item.MachineDescription.InstalledMedia ? "Installed Media" : "No Extras")</td>  *@                       

                        <td>

                            <div class="btn-group" role="group">
                                <!-- Edit Button -->
                                <a asp-action="Edit" asp-route-id="@item.ID"
                                   class="btn btn-outline-primary btn-sm py-0 px-1"
                                   title="Edit Record">
                                    <i class="bi bi-pencil-square me-1" style="font-size: 0.8rem;"></i>Edit
                                </a>

                                <!-- Details Button -->
                                <a asp-action="Details" asp-route-id="@item.ID"
                                   class="btn btn-outline-info btn-sm py-0 px-1"
                                   title="View Details">
                                    <i class="bi bi-eye-fill me-1" style="font-size: 0.8rem;"></i>Details
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (Model.Any())
{
    <div class="d-flex justify-content-center align-items-center my-4">
        <!-- Previous Button -->
        <button id="prev" class="btn btn-outline-success me-2" title="Previous Page">
            <i class="bi bi-chevron-left me-1"></i> Previous
        </button>

        <!-- Page Info -->
        <span id="page-info" class="mx-3 badge bg-light text-dark fs-6">
            Page <span id="current-page">1</span> of <span id="total-pages">1</span>
        </span>

        <!-- Next Button -->
        <button id="next" class="btn btn-outline-success ms-2" title="Next Page">
            Next <i class="bi bi-chevron-right ms-1"></i>
        </button>
    </div>
}


@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Filter collapse functionality
            const filterCollapse = document.getElementById('filterCollapse');
            const toggleIcon = document.getElementById('filterToggleIcon');

            // Initialize based on localStorage
            const savedState = localStorage.getItem('filterState');
            if (savedState === 'collapsed') {
                new bootstrap.Collapse(filterCollapse, { toggle: false });
                toggleIcon.classList.replace('bi-funnel-fill', 'bi-funnel');
            }

            // Toggle icon and save state
            filterCollapse.addEventListener('show.bs.collapse', function () {
                toggleIcon.classList.replace('bi-funnel', 'bi-funnel-fill');
                localStorage.setItem('filterState', 'expanded');
            });

            filterCollapse.addEventListener('hide.bs.collapse', function () {
                toggleIcon.classList.replace('bi-funnel-fill', 'bi-funnel');
                localStorage.setItem('filterState', 'collapsed');
            });

            // Form submission handling
            const filterForm = document.getElementById('filterForm');
            const filterButton = document.getElementById('filterButton');
            const loadingSpinner = document.getElementById('loadingSpinner');

            filterForm.addEventListener('submit', function () {
                filterButton.disabled = true;
                loadingSpinner.classList.remove('d-none');
            });

            // Pagination functionality
            const rowsPerPage = 10;
            let currentPage = 1;
            let tableRows = document.querySelectorAll("tbody tr:not([style*='display: none'])");
            let totalPages = Math.ceil(tableRows.length / rowsPerPage);
            const prevBtn = document.getElementById("prev");
            const nextBtn = document.getElementById("next");
            const pageInfo = document.getElementById("page-info");

            function renderTable() {
                let visibleCount = 0;
                tableRows.forEach((row, index) => {
                    const shouldShow = (index >= (currentPage - 1) * rowsPerPage &&
                        index < currentPage * rowsPerPage);
                    row.style.display = shouldShow ? "" : "none";
                    if (shouldShow) visibleCount++;
                });

                pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
                prevBtn.disabled = currentPage === 1;
                nextBtn.disabled = currentPage === totalPages || totalPages === 0;
            }

            prevBtn?.addEventListener("click", function () {
                if (currentPage > 1) {
                    currentPage--;
                    renderTable();
                }
            });

            nextBtn?.addEventListener("click", function () {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderTable();
                }
            });

            // Initialize
            updatePagination();

            function updatePagination() {
                tableRows = document.querySelectorAll("tbody tr:not([style*='display: none'])");
                totalPages = Math.ceil(tableRows.length / rowsPerPage);
                if (currentPage > totalPages && totalPages > 0) currentPage = totalPages;
                renderTable();
            }
        });
    </script>
}