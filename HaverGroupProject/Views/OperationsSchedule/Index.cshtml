


 @model IEnumerable<HaverGroupProject.Models.OperationsSchedule>

@{
    ViewData["Title"] = "Operations Schedule";
}

<h1>Operations Schedule</h1>


<p>
    <a asp-action="Step1" class="btn btn-success" style="font-size: 12px;">Create New</a>
</p>
    <table class="table table-bordered table-striped table-hover">
        <thead class=" table-col">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.SalesOrdNum)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ExtSalesOrdNum)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customer)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Engineer)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MachineDescription)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MachineDescription.SerialNumber)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.PackageReleaseName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.KickoffMeeting)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReleaseApprovalDrawing)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OperationsScheduleVendors)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProductionOrderNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PODueDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DeliveryDate)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.SalesOrdNum)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ExtSalesOrdNum)
                </td>
                <td>
                    @(item.Customer != null ? item.Customer.CustomerName : "N/A")
                </td>
                <td>
                    @(item.Engineer != null ? item.Engineer.EngSummary : "N/A")
                </td>
                <td>
                    @(item.MachineDescription != null ? item.MachineDescription.DescriptionSummary : "N/A")
                </td>
                <td>
                    @(item.MachineDescription != null ? item.MachineDescription.SerialNumber : "N/A")
                </td>
                <td>
                    @(item.PackageReleaseName ?? "N/A")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.KickoffMeeting)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ReleaseApprovalDrawing)
                </td>
                <td>
                    @{
                        if (item.OperationsScheduleVendors != null && item.OperationsScheduleVendors.Any())
                        {
                            var vendors = item.OperationsScheduleVendors.Select(v => v?.Vendor?.VendorName ?? "Unknown Vendor").ToList();
                            string firstVendor = vendors.First();
                            int vendorCount = vendors.Count;

                            if (vendorCount > 1)
                            {
                                <a class="" role="button" data-bs-toggle="collapse" href="#collapseVendor@(item.ID)"
                                   aria-expanded="false" aria-controls="collapseVendor@(item.ID)">
                                    @firstVendor <span class="badge bg-info">@vendorCount</span>
                                </a>
                                <div class="collapse" id="collapseVendor@(item.ID)">
                                    @foreach (var vendor in vendors.Skip(1))
                                    {
                                        <span>@vendor</span>

                                        <br />
                                    }
                                </div>
                            }
                            else
                            {
                                @firstVendor
                            }
                        }
                        else
                        {
                            @:No Vendors
                        }
                    }

                </td>
                <td>
                    @(item.ProductionOrderNumber ?? "N/A")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PODueDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DeliveryDate)
                </td>
                <td>
                    <div class="btn-group">
                        <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-primary btn-sm">Edit</a>
                        <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-info btn-sm">Details</a>
                        <a asp-action="Delete" asp-route-id="@item.ID" class="btn btn-danger btn-sm">Delete</a>
                    </div>
                </td>

            </tr>
        }
    </tbody>
</table>



<div class="d-flex justify-content-center my-sm-1">
    <button id="prev" class="btn btn-success"> Previous </button>
    <span id="page-info"></span>
    <button id="next" class="btn btn-success">Next Page</button>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const rowsPerPage = 10; 
        let currentPage = 1;
        const tableRows = document.querySelectorAll("tbody tr"); 
        const totalPages = Math.ceil(tableRows.length / rowsPerPage);
        const prevBtn = document.getElementById("prev");
        const nextBtn = document.getElementById("next");
        const pageInfo = document.getElementById("page-info");

        function renderTable() {
            tableRows.forEach((row, index) => {
                row.style.display = (index >= (currentPage - 1) * rowsPerPage && index < currentPage * rowsPerPage)
                    ? ""
                    : "none";
            });

            pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
            prevBtn.disabled = currentPage === 1;
            nextBtn.disabled = currentPage === totalPages;
        }

        prevBtn.addEventListener("click", function () {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
            }
        });

        nextBtn.addEventListener("click", function () {
            if (currentPage < totalPages) {
                currentPage++;
                renderTable();
            }
        });

        renderTable(); 
    });
</script>

