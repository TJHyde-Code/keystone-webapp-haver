@model IEnumerable<HaverGroupProject.Models.OperationsSchedule>

@{
    ViewData["Title"] = "Gantt";
}

<h1>Active Gantts</h1>

<div class="shadow-lg p-3 mb-5 bg-body-tertiary rounded">

    <div>
        <a asp-action="Create" class="btn btn-success" style="font-size: 12px;">Create New Gantt</a>
    </div>



    <div class="container-fluid">
        <div class="row">

            <div class="col  col-12 col-lg-4 task-table-wrapper">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            
                            <th>@Html.DisplayNameFor(model => model.Customer)</th>                                                 
                            
                            
                            
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                
                                <td class="d-flex justify-content-between align-items-center">
                                    <span>@item.Customer.CustomerName </span>
                                    <div class="action-icons">
                                        <a asp-action="Edit" asp-route-id="@item.ID" class="icon-link">
                                            <i class="bi bi-pencil-fill"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.ID" class="icon-link">
                                            <i class="bi bi-trash-fill"></i>
                                        </a>
                                    </div>
                                </td> 
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- GANTT CHART DIV -->
            <div class="col-12 col-lg-8 gantt-chart-wrapper">
                <div id="gantt_chart" class="gantt-chart"></div>
            </div>
        </div>
    </div>
</div>

@section stylesheets {
    @* stylesheet for Gantt charts *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.5.0/frappe-gantt.css">
}

@section Scripts {
    @* Script for Gantt charts *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.5.0/frappe-gantt.min.js"></script>

        <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Fetch task data from the server and convert it into JSON format
            fetch("@Url.Action("GetTasks", "OperationsSchedule")")
                .then(response => response.json())
                .then(tasks => {
                    console.log("Fetched tasks", tasks);

                    if (!tasks || tasks.length === 0) {
                        console.error("No tasks found.");
                        return;
                    }                  
                    //Assigning each task a sequential index
                    tasks.forEach((task, index) => {                                   
                        task.custom_index = index; 
                    });

                    // Map tasks to the structure required by Gantt
                    const ganttTasks = tasks.flatMap(task => {                     

                        return {                            
                            id: task.id,
                            customer: task.customer,
                            name: task.customer, // Use customer name as the task name
                            custom_class: `task-${task.id}`,
                            ranges: task.dateRanges.map(dateRange => {
                                const startDate = new Date(dateRange.startDate);  // Start date
                                const endDate = new Date(dateRange.endDate);      // End date

                                return {                                    
                                    name: dateRange.name,
                                    start: startDate.toISOString(),  
                                    end: endDate.toISOString(),      
                                    color: dateRange.color,
                                    progress: dateRange.progress,
                                    custom_index: task.custom_index
                                };
                            })
                        };
                    });

                    // Flatten the ganttTasks data structure to pass to the Gantt chart
                    const flatGanttTasks = [];
                    ganttTasks.forEach(task => {
                        task.ranges.forEach(range => {
                            flatGanttTasks.push({
                                custom_index: range.custom_index,
                                id: task.id,
                                customer: task.customer,
                                name: range.name,
                                start: new Date(range.start),
                                end: new Date(range.end),
                                color: range.color,
                                // progress: range.progress,
                                progress: 100, //default progress to 100%, remove value from seeding.
                                _row: range.custom_index  // Collapse task related objects to the custom_index.
                            });
                        });
                    });                    
                     console.log("flatGantt:", flatGanttTasks);

                    // Initialize the Gantt chart with the flat task data
                    let gantt = new Gantt("#gantt_chart", flatGanttTasks, {
                        view_mode: 'Week',
                         on_click: task => console.log("Clicked:", task),
                         on_date_change: (task, start, end) => updateTask(task, start, end),
                        custom_popup_html: task => `
                            <div class="details-popup">
                                <strong>Customer:</strong> ${task.customer}<br/>
                                <strong>Milestone:</strong> ${task.name}<br/>
                                <strong>Start:</strong> ${new Date(task.start).toLocaleDateString()}<br/>
                                <strong>End:</strong> ${new Date(task.end).toLocaleDateString()}<br/>
                                <strong>Progress:</strong> ${task.progress}%
                            </div>`,
                        date_format: "yyyy-MM-dd" // Ensure consistent date format                        
                    });

                     // // Wait for the Gantt chart to render completely before applying styles
                        gantt.refresh(flatGanttTasks);

                    setTimeout(() => {
                        const rowHeight =28;
                        const topMargin = 4;

                        function applyYOffset(el, yOffset) {
                            if (!el) return;
                            const tag = el.tagName.toLowerCase();

                            if (tag === "rect") {
                                el.setAttribute("y", yOffset);
                            } else if (tag === "polygon") {
                                const points = el.getAttribute("points");
                                if (points) {
                                    const updatedPoints = points
                                        .split(" ")
                                        .map(point => {
                                            const [x, y] = point.split(",").map(Number);
                                            return `${x},${y + yOffset}`;
                                        })
                                        .join(" ");
                                    el.setAttribute("points", updatedPoints);
                                }
                            } else if (tag === "g") {
                                el.setAttribute("transform", `translate(0, ${yOffset})`);
                            } else {
                                el.style.transform = `translateY(${yOffset}px)`;
                            }
                        }

                        // Add top margin to the gantt chart wrapper
                        const ganttSvg = document.querySelector("#gantt_chart svg");
                        if (ganttSvg) {
                            ganttSvg.style.marginTop = `${topMargin}px`;
                        }

                        const bars = document.querySelectorAll(".bar");
                        const progressBars = document.querySelectorAll(".bar-progress");
                        const labels = document.querySelectorAll(".bar-label");
                        const wrappers = document.querySelectorAll(".bar-wrapper");
                        const polygons = document.querySelectorAll(".progress-polygon");
                        const handles = document.querySelectorAll(".handle");
                        const taskGroups = document.querySelectorAll("g.task");

                        // Hide labels
                        labels.forEach(label => {
                            label.style.display = "none";
                        });

                        flatGanttTasks.forEach((task, index) => {
                            const offset = topMargin + task._row * rowHeight;

                            applyYOffset(bars[index], offset);
                            applyYOffset(progressBars[index], offset);
                            applyYOffset(labels[index], offset);
                            applyYOffset(wrappers[index], offset);
                            applyYOffset(polygons[index], offset);
                            applyYOffset(taskGroups[index], offset);

                            // Also apply color to progress bar
                            if (progressBars[index]) {
                                progressBars[index].setAttribute("fill", task.color);
                                progressBars[index].style.fill = task.color;
                            }

                            
                        });

                        // Handles: 2 per task (start and end)
                        handles.forEach((handle, index) => {
                            const rowIndex = Math.floor(index / 2);
                            const offset = topMargin + flatGanttTasks[rowIndex]?._row * rowHeight;
                            applyYOffset(handle, offset);
                        });

                        // Adjust .row height and spacing
                        document.querySelectorAll(".gantt .row").forEach(row => {
                            row.style.height = `${rowHeight}px`;
                            row.style.display = "flex";
                            row.style.alignItems = "center";
                            row.style.borderBottom = "none";


                        });

                        // // Adjust grid backgrounds
                        // document.querySelectorAll(".grid-row, .grid-background").forEach(grid => {
                        //     grid.style.height = `${rowHeight}px`;
                        // });

                        // Remove or hide only the background bars (the .bar class inside each .bar-wrapper)
                        document.querySelectorAll(".bar-wrapper .bar").forEach(background => {
                            background.style.display = 'none';  // Hide the background bar
                        });

                        console.log("All Gantt elements fully aligned with margin, colors, and handles.");
                    }, 600);

                })
                .catch(error => console.error("Error fetching tasks:", error));
        });
    </script>

}
